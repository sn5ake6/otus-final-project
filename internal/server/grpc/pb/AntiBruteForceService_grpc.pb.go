// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: AntiBruteForceService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiBruteForceServiceClient is the client API for AntiBruteForceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteForceServiceClient interface {
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	AddToBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	DeleteFromBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	AddToWhitelist(ctx context.Context, in *WhitelistRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	DeleteFromWhitelist(ctx context.Context, in *WhitelistRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type antiBruteForceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteForceServiceClient(cc grpc.ClientConnInterface) AntiBruteForceServiceClient {
	return &antiBruteForceServiceClient{cc}
}

func (c *antiBruteForceServiceClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForceService/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForceService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) AddToBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForceService/AddToBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) DeleteFromBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForceService/DeleteFromBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) AddToWhitelist(ctx context.Context, in *WhitelistRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForceService/AddToWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) DeleteFromWhitelist(ctx context.Context, in *WhitelistRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForceService/DeleteFromWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteForceServiceServer is the server API for AntiBruteForceService service.
// All implementations must embed UnimplementedAntiBruteForceServiceServer
// for forward compatibility
type AntiBruteForceServiceServer interface {
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	Reset(context.Context, *ResetRequest) (*ResultResponse, error)
	AddToBlacklist(context.Context, *BlacklistRequest) (*ResultResponse, error)
	DeleteFromBlacklist(context.Context, *BlacklistRequest) (*ResultResponse, error)
	AddToWhitelist(context.Context, *WhitelistRequest) (*ResultResponse, error)
	DeleteFromWhitelist(context.Context, *WhitelistRequest) (*ResultResponse, error)
	mustEmbedUnimplementedAntiBruteForceServiceServer()
}

// UnimplementedAntiBruteForceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBruteForceServiceServer struct {
}

func (UnimplementedAntiBruteForceServiceServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) Reset(context.Context, *ResetRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) AddToBlacklist(context.Context, *BlacklistRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlacklist not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) DeleteFromBlacklist(context.Context, *BlacklistRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromBlacklist not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) AddToWhitelist(context.Context, *WhitelistRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhitelist not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) DeleteFromWhitelist(context.Context, *WhitelistRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromWhitelist not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) mustEmbedUnimplementedAntiBruteForceServiceServer() {}

// UnsafeAntiBruteForceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteForceServiceServer will
// result in compilation errors.
type UnsafeAntiBruteForceServiceServer interface {
	mustEmbedUnimplementedAntiBruteForceServiceServer()
}

func RegisterAntiBruteForceServiceServer(s grpc.ServiceRegistrar, srv AntiBruteForceServiceServer) {
	s.RegisterService(&AntiBruteForceService_ServiceDesc, srv)
}

func _AntiBruteForceService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForceService/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForceService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_AddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).AddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForceService/AddToBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).AddToBlacklist(ctx, req.(*BlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_DeleteFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).DeleteFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForceService/DeleteFromBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).DeleteFromBlacklist(ctx, req.(*BlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_AddToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).AddToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForceService/AddToWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).AddToWhitelist(ctx, req.(*WhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_DeleteFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).DeleteFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForceService/DeleteFromWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).DeleteFromWhitelist(ctx, req.(*WhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteForceService_ServiceDesc is the grpc.ServiceDesc for AntiBruteForceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteForceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.AntiBruteForceService",
	HandlerType: (*AntiBruteForceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _AntiBruteForceService_Authorize_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _AntiBruteForceService_Reset_Handler,
		},
		{
			MethodName: "AddToBlacklist",
			Handler:    _AntiBruteForceService_AddToBlacklist_Handler,
		},
		{
			MethodName: "DeleteFromBlacklist",
			Handler:    _AntiBruteForceService_DeleteFromBlacklist_Handler,
		},
		{
			MethodName: "AddToWhitelist",
			Handler:    _AntiBruteForceService_AddToWhitelist_Handler,
		},
		{
			MethodName: "DeleteFromWhitelist",
			Handler:    _AntiBruteForceService_DeleteFromWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AntiBruteForceService.proto",
}
